// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2974.PiyushOMatic.subsystems;

import org.usfirst.frc2974.PiyushOMatic.RobotMap;
import org.usfirst.frc2974.PiyushOMatic.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {
	public DriveTrain() {
		initEncoders();
	}
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder eRight = new Encoder(RobotMap.driveTrainRightEncoderA,RobotMap.driveTrainRightEncoderB,true);
    Encoder eLeft = new Encoder(RobotMap.driveTrainLeftEncoderA,RobotMap.driveTrainLeftEncoderB);
    Talon leftMainDrive1 = (Talon)RobotMap.driveTrainLeftMainDrive1;
    Talon leftMainDrive2 = (Talon)RobotMap.driveTrainLeftMainDrive2;
    Talon rightMainDrive1 = (Talon)RobotMap.driveTrainRightMainDrive1;
    Talon rightMainDrive2 = (Talon)RobotMap.driveTrainRightMainDrive2;
    Solenoid shifter = RobotMap.pneumaticsShifter;
    BuiltInAccelerometer accel = new BuiltInAccelerometer();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    private double distanceTravelled;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void set(double left, double right)
    {
    	setLeft(left);
    	setRight(right);
    }
    
    private void setLeft(double left)
    {
    	leftMainDrive1.set(-left);
    	leftMainDrive2.set(-left);
    }
    
    private void setRight(double right)
    {
    	rightMainDrive1.set(right);
    	rightMainDrive2.set(right); 
    }
    
    public double getDistanceTravelled()
    {
    	SmartDashboard.putNumber("Left Encoder", eLeft.getDistance());
    	SmartDashboard.putNumber("Right Encoder", eRight.getDistance());
    	return Math.min(eRight.getDistance() , eLeft.getDistance());
    }
    
    public double getDistanceTravelledLeft()
    {
    	SmartDashboard.putNumber("Left Encoder", eLeft.getDistance());
    	return eLeft.getDistance();
    }
    
    public double getDistanceTravelledRight()
    {
    	SmartDashboard.putNumber("Right Encoder", eRight.getDistance());
    	return eRight.getDistance();
    }
    
    public void initEncoders(){
    	/*
    	 * Wheels are 4" in diameter
    	 * circumference is 4pi
    	 * 128 pulses per revolution
    	 * 36 teeth on wheel
    	 * 30 teeth on sprocket
    	 * ratio of 3 to 1 for encoders
    	 * 128 pulses per revolution
    	 * 
    	 * 4pi*(30/36)/3/128 = .027271
    	 */
    	final double distPP = .027271 * 4;
    	eRight.setDistancePerPulse(distPP);
    	eLeft.setDistancePerPulse(distPP);
//    	eRight.setPIDSourceParameter(PIDSourceParamter);
//    	eLeft.setPIDSourceParameter(PIDSourceParamter);//TODO do this
    	
//    	eRight.setSamplesToAverage(NumberOfPulsesPerRotation);
//    	eLeft.setSamplesToAverage(NumberOfPulsesPerRotation);//TODO do this 1-127
    	
    	eRight.setMinRate(.1);
    	eLeft.setMinRate(.1);
    	
//    	System.out.println("LEFT REVERSE DIRECTION");
//    	eLeft.setReverseDirection(true);
//    	
    }
    
    public void resetEncoders()
    {
    	eLeft.reset();
    	eRight.reset();
    }
    
    public void toggleShift()
    {
    	shifter.set(!shifter.get());
    }
    
    public void shiftUp()
    {
    	shifter.set(true);
    }
    
    public void shiftDown()
    {
    	shifter.set(false);
    }
    
    public void shift(boolean isUp){
    	shifter.set(isUp);
    }
    public double getLeftSpeed()
    {
    	return (leftMainDrive1.getSpeed() + leftMainDrive2.getSpeed()) / 2;
    }
    public double getRightSpeed()
    {
    	return (rightMainDrive1.getSpeed() + rightMainDrive2.getSpeed()) / 2;
    }
    
    public double getXAccel() {
    	return accel.getX();
    }
    public double getYAccel() {
    	return accel.getY();
    }
    public double getZAccel() {
    	return accel.getZ();
    }
}

